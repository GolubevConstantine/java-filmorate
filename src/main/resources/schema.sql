DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa_rating CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS film_genres CASCADE;
DROP TABLE IF EXISTS reviews CASCADE;

CREATE TABLE IF NOT EXISTS users
(
    user_id  int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    varchar      NOT NULL,
    login    varchar(255) NOT NULL,
    name     varchar(255),
    birthday date         NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS USER_EMAIL_UINDEX ON USERS (email);
CREATE UNIQUE INDEX IF NOT EXISTS USER_LOGIN_UINDEX ON USERS (login);

CREATE TABLE IF NOT EXISTS friendship
(
    PRIMARY KEY (user_id, friend_id),
    user_id   int,
    friend_id int,
    accepted  boolean,
    FOREIGN KEY (user_id) REFERENCES users (user_id),
    FOREIGN KEY (friend_id) REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS mpa_rating
(
    rating_id int auto_increment,
    name      varchar(255)
);

CREATE TABLE IF NOT EXISTS films
(
    film_id     int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        varchar(255) NOT NULL,
    description varchar(200) NOT NULL,
    releaseDate date         NOT NULL,
    duration    int,
    rating_id   int
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id int,
    user_id int,
    PRIMARY KEY (user_id, film_id),
    FOREIGN KEY (film_id) REFERENCES films (film_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id int auto_increment PRIMARY KEY,
    name     varchar(255)
);

CREATE TABLE IF NOT EXISTS film_genres
(
    id       int auto_increment,
    film_id  int,
    genre_id int,
    FOREIGN KEY (film_id) REFERENCES films (film_id),
    FOREIGN KEY (genre_id) REFERENCES genres (genre_id)
);

CREATE TABLE IF NOT EXISTS reviews
(
    review_id   int auto_increment PRIMARY KEY,
    content     varchar(1000),
    is_positive bool,
    user_id     int,
    film_id     int,
    useful      int,
    FOREIGN KEY (film_id) REFERENCES films (film_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);

CREATE UNIQUE INDEX IF NOT EXISTS reviews_user_film_idx ON reviews (user_id, film_id);
